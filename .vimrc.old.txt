call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdtree'
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'ap/vim-css-color'
Plug 'alvan/vim-closetag'
Plug 'machakann/vim-highlightedyank'

" post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

" language helpers
Plug 'pangloss/vim-javascript'
Plug 'sheerun/vim-polyglot'

" Colorschemes
Plug 'ghifarit53/tokyonight-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'sainnhe/gruvbox-material'
Plug 'arcticicestudio/nord-vim'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }

" fuzzy finding
Plug 'ctrlpvim/ctrlp.vim' 

call plug#end()

let mapleader = ' '

let g:highlightedyank_highlight_duration = 100

" lightline
set laststatus=2 

" Lightline Themes
" let g:lightline = {'colorscheme': 'apprentice'}
" let g:lightline = {'colorscheme': 'rosepine'}
" let g:lightline = {'colorscheme': 'simpleblack'}
" let g:lightline = {'colorscheme': 'powerlineish'}
" let g:lightline = {'colorscheme': 'Tomorrow_Night'}
let g:lightline = {'colorscheme': 'ayu_dark'}

syntax on
set nu
set relativenumber
set noshowcmd
set noshowmode
set wildmenu
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

set autoindent
set autoread
set smartindent
set tabstop=2
set softtabstop=2
set expandtab
set ruler
set backspace=indent,eol,start
set scrolloff=5
set cmdheight=1

set termguicolors
highlight SignColumn ctermbg=233
set signcolumn=yes
set background=dark
" set background=light

set nowrap
set nobackup
set hidden
set noswapfile
set nowritebackup
colorscheme tokyonight


" Keymappings
" - ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~

" save & quit
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" Better ESC
inoremap jk <esc>
inoremap kj <esc>

" Better Delete
nnoremap <leader>d dd

" clear highlights
nnoremap <leader>n :nohl<cr>

" better end of line yank
nnoremap Y y$

" Buffer
nnoremap H :bprevious<cr>
nnoremap L :bnext<cr>

nnoremap <leader>o O<cr>

" fuzzy finder
" nnoremap - <ctrl>p

" NerdTree
nnoremap <leader>e :NERDTreeToggle<cr>

" Auto close tag
" - ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~

" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'
