call plug#begin('~/.vim/plugged')

" git & terminal
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'voldikss/vim-floaterm'

" Search & Navigation
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'scrooloose/nerdtree'
" dependencies: ack & ripgrep -- deprecated, remove
Plug 'mileszs/ack.vim'

" editing helpers
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'mhinz/vim-startify'
Plug 'machakann/vim-highlightedyank'

" Syntax 
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ap/vim-css-color'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'sheerun/vim-polyglot'

" dependencies: yarn or npm
" post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

" Color Schemes -- line 206
Plug 'rafi/awesome-vim-colorschemes'

Plug 'sainnhe/edge'
Plug 'sainnhe/sonokai'
Plug 'arcticicestudio/nord-vim'
Plug 'doums/darcula'
Plug 'jacoborus/tender.vim'
Plug 'liuchengxu/space-vim-dark'
Plug 'NLKNguyen/papercolor-theme'
Plug 'embark-theme/vim', { 'as': 'embark', 'branch': 'main' }
Plug 'wuelnerdotexe/vim-enfocado'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }

" status line
Plug 'itchyny/lightline.vim'

call plug#end()


" to see list of colorschemes --> :h g:lightline.colorscheme
let g:lightline = { 'colorscheme': 'Tomorrow_Night_Eighties' }

" ///////////////////////////
" /////  OPTIONS /////////////
" /////////////////////////////
filetype plugin on
set nocompatible

let g:highlightedyank_highlight_duration = 100

" Git Gutter
let g:gitgutter_enabled = 1

" Prettier
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

" ///////////////////////////////////
" ///// KEY MAPPINGS /////////////////
" //////////////////////////////////////
let mapleader = ' '

" save & quit
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
" del
nnoremap <leader>d dd 

" :nohl 
:nnoremap <leader>n :nohl<CR>

" resize splits
"--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
:nnoremap <Up> :resize +2<CR>
:nnoremap <Down> :resize -2<CR>
:nnoremap <Left> :vertical :resize +2<CR>
:nnoremap <Right> :vertical :resize -2<CR>

" Yank to end of the line
"--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
:nnoremap Y y$

" escape to normal mode
"--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
:inoremap jk <ESC>
:inoremap kj <ESC>

" NerdTree
"--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
nnoremap <leader>e :NERDTreeToggle<cr>

" Floaterm 
nnoremap <leader>t :FloatermNew lazygit<cr>
let g:floaterm_height = 0.9
let g:floaterm_width = 0.9

" FZF files & Buffers
"--- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
:nnoremap <C-p> :GFiles<CR>
set rtp+=/opt/homebrew/opt/fzf
set updatetime=100
" last buffer: <C-^> .. back and forth
":bd - buffer delete
":ls - buffer list
":b# - buffer number
"
" Open Buffer Search
:nnoremap <leader>b :Buffers<CR> 
" Pattern search
:nnoremap <leader>\ :Rg<CR>

" Ack! -> search for pattern in Project files
" :nnoremap <leader>\ :Ack!<Space>
" Preferred File Search Engine; Ripgrep engine 
" if executable('rg')
"     let g:ackprg = 'rg -S --no-heading --vimgrep'
" endif

syntax on
set nu
set relativenumber
set showcmd
set wildmenu
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

set noshowmode " to not see the MODE in the bottom

set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set expandtab
set ruler
set backspace=indent,eol,start
set scrolloff=8
set cmdheight=1
set laststatus=2 " lightline    

set termguicolors
set signcolumn=yes
set background=dark
colorscheme minimalist

" set the backgroud to transparent:
" hi Normal guibg=NONE ctermbg=NONE

set nowrap
set nobackup
set hidden
set noswapfile
set nowritebackup
set autoread

" Auto Save ---------------------------------------------
" " save on buffer switch OR lose focus
" set autowrite
" " set autowriteall
" :au FocusLost * :w

" Cursor line ---------------------------------------------
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

" --------Status line --(no plugin)------------------------
" set laststatus=2
" function! GitBranch()
"   return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
" endfunction

" function! StatuslineGit()
"   let l:branchname = GitBranch()
"   return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
" endfunction

" set statusline=
" set statusline+=%#PmenuSel#
" set statusline+=%{StatuslineGit()}
" set statusline+=%#LineNr#
" set statusline+=\ %f
" set statusline+=%m\
" set statusline+=%=
" set statusline+=%#CursorColumn#
" set statusline+=\ %y
" set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
" set statusline+=\[%{&fileformat}\]
" set statusline+=\ %p%%
" set statusline+=\ %l:%c
" set statusline+=\ 

" Auto close tag
" - ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~- ~
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'

" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
" COC vim plugin  
" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
" 
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

autocmd FileType json syntax match Comment +\/\/.\+$+
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

let g:asciis = [
      \ '',
      \ '',
      \ '      ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣶⣿⣿⣿⣿⣿⣿⣿⣶⣦⣀⠀⠀⠀⠀⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⠀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⢠',
      \ '      ⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣛⣻⣿⣿⣟⣿⣿⣿⣷⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣫⣽⣾⣻⣾⣿⣿⣿⣿⡿⣿⣿⠀⠀⠀',
      \ '      ⠀⠀⠀⢰⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠻⡿⠿⠟⠛⣟⣿⣽⠀⠀⠀',
      \ '      ⠀⠀⠀⠸⣿⣿⣿⣷⣿⣿⣿⣿⡿⠍⠈⠀⠁⣴⡆⠀⠀⠠⢭⣮⣿⡶⠀⠀',
      \ '      ⠀⡴⠲⣦⢽⣿⣿⣿⣿⣿⣟⣩⣨⣀⡄⣐⣾⣿⣿⣇⠠⣷⣶⣿⣿⡠⠁⠀',
      \ '      ⠀⠃⢀⡄⠀⢻⣿⣿⣿⣿⣽⢿⣿⣯⣾⣿⣿⣿⣿⣿⢿⣿⣿⡟⣿⠀⠀⠀',
      \ '      ⠀⠀⠣⠧⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢸⣿⠿⠿⠿⣧⠙⣿⣿⡿⠀⠀⠀',
      \ '      ⠀⠀⠀⠁⠼⣒⡿⣿⣿⣿⣿⣿⣿⣿⣠⣬⠀⠀⠀⠀⣾⣷⡈⣿⡇⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⠉⢳⣿⣿⣿⣿⣿⣿⣿⢟⠗⠼⠖⠒⠔⠉⠉⠻⣿⠇⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⠀⠈⣻⡿⣿⣿⣿⣿⡿⡀⣤⡄⠸⣰⣾⡒⣷⣴⣿⠀⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⠀⠂⢸⡗⡄⠘⠭⣭⣷⣿⣮⣠⣌⣫⣿⣷⣿⣿⠃⠀⠈⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⠈⠀⢸⣿⣾⣷⣦⡿⣿⣿⣿⡿⢻⠞⣹⣿⣿⠏⠀⠀⠀⠀⠀',
      \ '      ⠀⠀⠀⠀⠀⢘⠀⠘⢻⡿⢿⣋⣤⣤⠌⠉⠛⠛⠀⠈⠉⠁⠀⠀⠀⠀⠀⡀',
      \ '',
        \ ]


" let g:thought = [
" 	\ 'o',
" 	\ '  O',
"   \ ]


let g:startify_custom_header =
			\ 'startify#pad(g:asciis)'
			" \ 'startify#pad(startify#fortune#boxed() + startify#pad(startify#pad(startify#pad(g:thought + g:asciis))))'
